function template:
(1), function template and non-template function can overload at the same file, when there are all fitable for call,
    compiler choose non-template function first
(2), Automatic type conversion only for non-template function
(3), all overload function transform arguement by reference, two cautious: first, if the number of the function arguement is 
   different; second, the arguement's type of the function is different, or it will bring side effect 
(4), function called should be defined before calling
(5), notype template function(template<typename T, int MAXSIZE>)

class template:
(1), completily declaration must be added showly before class's function, when you define class's function outside of class
(2), template arguement of class must be added showly, when you use template class 
(3), template class and template class's function instantiated separated, the latter instantiated until
   you use a template class's function  
(4), if a template class has a static data member, it will instantiated with template class
(5), template class specialization like as function overload, specialization class can defined what different from template class
(6), the number of the template argurment should be the same with template class ,when you make a partial instantialization 
(7), default template arguement
(8), notype template arguement(template<typename T, int MAXSIZE>)
(9), define a template member in template class
(10),template template parameter

note:
(1), floating-point literals ,char* and class object can not be used as nontype template arguement==>
    int(template<typename T, int MAXSIZE>)
